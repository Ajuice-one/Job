package com.bawei.database.My.BeanDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bawei.data_resource.bean.QuickBean;
import com.bawei.database.My.db.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUICK_BEAN".
*/
public class QuickBeanDao extends AbstractDao<QuickBean, Long> {

    public static final String TABLENAME = "QUICK_BEAN";

    /**
     * Properties of entity QuickBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Myid = new Property(0, long.class, "myid", true, "_id");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property Authname = new Property(2, String.class, "authname", false, "AUTHNAME");
        public final static Property Publishtime = new Property(3, String.class, "publishtime", false, "PUBLISHTIME");
        public final static Property Caption = new Property(4, String.class, "caption", false, "CAPTION");
        public final static Property View_count = new Property(5, int.class, "view_count", false, "VIEW_COUNT");
        public final static Property Like_count = new Property(6, int.class, "like_count", false, "LIKE_COUNT");
        public final static Property Headpath = new Property(7, String.class, "headpath", false, "HEADPATH");
        public final static Property Videopath = new Property(8, String.class, "videopath", false, "VIDEOPATH");
        public final static Property Videomainimg = new Property(9, String.class, "videomainimg", false, "VIDEOMAINIMG");
    }


    public QuickBeanDao(DaoConfig config) {
        super(config);
    }
    
    public QuickBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUICK_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: myid
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"AUTHNAME\" TEXT," + // 2: authname
                "\"PUBLISHTIME\" TEXT," + // 3: publishtime
                "\"CAPTION\" TEXT," + // 4: caption
                "\"VIEW_COUNT\" INTEGER NOT NULL ," + // 5: view_count
                "\"LIKE_COUNT\" INTEGER NOT NULL ," + // 6: like_count
                "\"HEADPATH\" TEXT," + // 7: headpath
                "\"VIDEOPATH\" TEXT," + // 8: videopath
                "\"VIDEOMAINIMG\" TEXT);"); // 9: videomainimg
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUICK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QuickBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMyid());
        stmt.bindLong(2, entity.getId());
 
        String authname = entity.getAuthname();
        if (authname != null) {
            stmt.bindString(3, authname);
        }
 
        String publishtime = entity.getPublishtime();
        if (publishtime != null) {
            stmt.bindString(4, publishtime);
        }
 
        String caption = entity.getCaption();
        if (caption != null) {
            stmt.bindString(5, caption);
        }
        stmt.bindLong(6, entity.getView_count());
        stmt.bindLong(7, entity.getLike_count());
 
        String headpath = entity.getHeadpath();
        if (headpath != null) {
            stmt.bindString(8, headpath);
        }
 
        String videopath = entity.getVideopath();
        if (videopath != null) {
            stmt.bindString(9, videopath);
        }
 
        String videomainimg = entity.getVideomainimg();
        if (videomainimg != null) {
            stmt.bindString(10, videomainimg);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QuickBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMyid());
        stmt.bindLong(2, entity.getId());
 
        String authname = entity.getAuthname();
        if (authname != null) {
            stmt.bindString(3, authname);
        }
 
        String publishtime = entity.getPublishtime();
        if (publishtime != null) {
            stmt.bindString(4, publishtime);
        }
 
        String caption = entity.getCaption();
        if (caption != null) {
            stmt.bindString(5, caption);
        }
        stmt.bindLong(6, entity.getView_count());
        stmt.bindLong(7, entity.getLike_count());
 
        String headpath = entity.getHeadpath();
        if (headpath != null) {
            stmt.bindString(8, headpath);
        }
 
        String videopath = entity.getVideopath();
        if (videopath != null) {
            stmt.bindString(9, videopath);
        }
 
        String videomainimg = entity.getVideomainimg();
        if (videomainimg != null) {
            stmt.bindString(10, videomainimg);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public QuickBean readEntity(Cursor cursor, int offset) {
        QuickBean entity = new QuickBean( //
            cursor.getLong(offset + 0), // myid
            cursor.getInt(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // authname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // publishtime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // caption
            cursor.getInt(offset + 5), // view_count
            cursor.getInt(offset + 6), // like_count
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // headpath
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // videopath
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // videomainimg
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QuickBean entity, int offset) {
        entity.setMyid(cursor.getLong(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setAuthname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPublishtime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCaption(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setView_count(cursor.getInt(offset + 5));
        entity.setLike_count(cursor.getInt(offset + 6));
        entity.setHeadpath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVideopath(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setVideomainimg(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QuickBean entity, long rowId) {
        entity.setMyid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QuickBean entity) {
        if(entity != null) {
            return entity.getMyid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QuickBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
